import bcrypt from 'bcrypt';
import jwt from 'jsonwebtoken';
import db from '../database/db.js';  // Conexión a la base de datos

// Función para verificar las credenciales del usuario (correo y contraseña)
async function verificarCredenciales(correo, contrasena) {
  try {
    // Buscar la credencial en la base de datos por el correo electrónico
    const query = `SELECT * FROM Credenciales WHERE correo_electronico = ?`;
    const [resultados] = await db.query(query, { replacements: [correo] });

    if (resultados.length === 0) {
      console.log('Correo no encontrado');
      return null;  // Usuario no encontrado
    }

    const credencial = resultados[0];  // Tomamos el primer resultado

    // Comparar la contraseña ingresada con la contraseña encriptada en la base de datos
    const esValida = await bcrypt.compare(contrasena, credencial.contrasena);

    if (!esValida) {
      console.log('Contraseña incorrecta');
      return null;  // Contraseña incorrecta
    }

    // Validar si el usuario tiene el rol de administrador (rol = '1')
    if (credencial.rol !== '1') {
      console.log('Acceso denegado: No es un administrador');
      return null;  // No es un administrador
    }

    return credencial;  // Si todo está bien, devolvemos la credencial
  } catch (error) {
    console.error('Error al verificar las credenciales:', error);
    throw error;
  }
}

// Función para generar un token JWT
function generarToken(credencial) {
  const payload = {
    id_credencial: credencial.id_credencial,
    correo_electronico: credencial.correo_electronico,
    rol: credencial.rol
  };

  // Generar un JWT que expira en 1 hora
  const token = jwt.sign(payload, 'mi_secreto_jwt', { expiresIn: '1h' });
  return token;
}

// Ruta de inicio de sesión en Express
app.post('/login', async (req, res) => {
  const { correo, contrasena } = req.body;  // Recibimos correo y contraseña

  // Verificar las credenciales
  const credencial = await verificarCredenciales(correo, contrasena);

  if (!credencial) {
    return res.status(401).json({ mensaje: 'Credenciales incorrectas o acceso denegado' });
  }

  // Si las credenciales son correctas, generar un token JWT
  const token = generarToken(credencial);

  // Enviar el token al cliente
  return res.status(200).json({ mensaje: 'Inicio de sesión exitoso', token });
});
